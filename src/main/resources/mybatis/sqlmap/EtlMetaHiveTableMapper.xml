<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fanli.metadata.dao.base.EtlMetaHiveTableMapper" >
  <resultMap id="BaseResultMap" type="com.fanli.metadata.entity.base.EtlMetaHiveTable" >
    <id column="table_id" property="tableId" jdbcType="INTEGER" />
    <result column="hive_db" property="hiveDb" jdbcType="VARCHAR" />
    <result column="input_format" property="inputFormat" jdbcType="VARCHAR" />
    <result column="output_format" property="outputFormat" jdbcType="VARCHAR" />
    <result column="hdfs_location" property="hdfsLocation" jdbcType="VARCHAR" />
    <result column="table_type" property="tableType" jdbcType="VARCHAR" />
    <result column="field_terminated" property="fieldTerminated" jdbcType="VARCHAR" />
    <result column="line_terminated" property="lineTerminated" jdbcType="VARCHAR" />
    <result column="store_format" property="storeFormat" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.fanli.metadata.entity.base.EtlMetaHiveTable" extends="BaseResultMap" >
    <result column="ddl_with_change" property="ddlWithChange" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    table_id, hive_db, input_format, output_format, hdfs_location, table_type, field_terminated, 
    line_terminated, store_format
  </sql>
  <sql id="Blob_Column_List" >
    ddl_with_change
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTableExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from etl_meta_hivetable
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTableExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from etl_meta_hivetable
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from etl_meta_hivetable
    where table_id = #{tableId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from etl_meta_hivetable
    where table_id = #{tableId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTableExample" >
    delete from etl_meta_hivetable
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTable" >
    insert into etl_meta_hivetable (table_id, hive_db, input_format, 
      output_format, hdfs_location, table_type, 
      field_terminated, line_terminated, store_format, 
      ddl_with_change)
    values (#{tableId,jdbcType=INTEGER}, #{hiveDb,jdbcType=VARCHAR}, #{inputFormat,jdbcType=VARCHAR}, 
      #{outputFormat,jdbcType=VARCHAR}, #{hdfsLocation,jdbcType=VARCHAR}, #{tableType,jdbcType=VARCHAR}, 
      #{fieldTerminated,jdbcType=VARCHAR}, #{lineTerminated,jdbcType=VARCHAR}, #{storeFormat,jdbcType=VARCHAR}, 
      #{ddlWithChange,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTable" >
    insert into etl_meta_hivetable
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="tableId != null" >
        table_id,
      </if>
      <if test="hiveDb != null" >
        hive_db,
      </if>
      <if test="inputFormat != null" >
        input_format,
      </if>
      <if test="outputFormat != null" >
        output_format,
      </if>
      <if test="hdfsLocation != null" >
        hdfs_location,
      </if>
      <if test="tableType != null" >
        table_type,
      </if>
      <if test="fieldTerminated != null" >
        field_terminated,
      </if>
      <if test="lineTerminated != null" >
        line_terminated,
      </if>
      <if test="storeFormat != null" >
        store_format,
      </if>
      <if test="ddlWithChange != null" >
        ddl_with_change,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="tableId != null" >
        #{tableId,jdbcType=INTEGER},
      </if>
      <if test="hiveDb != null" >
        #{hiveDb,jdbcType=VARCHAR},
      </if>
      <if test="inputFormat != null" >
        #{inputFormat,jdbcType=VARCHAR},
      </if>
      <if test="outputFormat != null" >
        #{outputFormat,jdbcType=VARCHAR},
      </if>
      <if test="hdfsLocation != null" >
        #{hdfsLocation,jdbcType=VARCHAR},
      </if>
      <if test="tableType != null" >
        #{tableType,jdbcType=VARCHAR},
      </if>
      <if test="fieldTerminated != null" >
        #{fieldTerminated,jdbcType=VARCHAR},
      </if>
      <if test="lineTerminated != null" >
        #{lineTerminated,jdbcType=VARCHAR},
      </if>
      <if test="storeFormat != null" >
        #{storeFormat,jdbcType=VARCHAR},
      </if>
      <if test="ddlWithChange != null" >
        #{ddlWithChange,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTableExample" resultType="java.lang.Integer" >
    select count(*) from etl_meta_hivetable
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update etl_meta_hivetable
    <set >
      <if test="record.tableId != null" >
        table_id = #{record.tableId,jdbcType=INTEGER},
      </if>
      <if test="record.hiveDb != null" >
        hive_db = #{record.hiveDb,jdbcType=VARCHAR},
      </if>
      <if test="record.inputFormat != null" >
        input_format = #{record.inputFormat,jdbcType=VARCHAR},
      </if>
      <if test="record.outputFormat != null" >
        output_format = #{record.outputFormat,jdbcType=VARCHAR},
      </if>
      <if test="record.hdfsLocation != null" >
        hdfs_location = #{record.hdfsLocation,jdbcType=VARCHAR},
      </if>
      <if test="record.tableType != null" >
        table_type = #{record.tableType,jdbcType=VARCHAR},
      </if>
      <if test="record.fieldTerminated != null" >
        field_terminated = #{record.fieldTerminated,jdbcType=VARCHAR},
      </if>
      <if test="record.lineTerminated != null" >
        line_terminated = #{record.lineTerminated,jdbcType=VARCHAR},
      </if>
      <if test="record.storeFormat != null" >
        store_format = #{record.storeFormat,jdbcType=VARCHAR},
      </if>
      <if test="record.ddlWithChange != null" >
        ddl_with_change = #{record.ddlWithChange,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update etl_meta_hivetable
    set table_id = #{record.tableId,jdbcType=INTEGER},
      hive_db = #{record.hiveDb,jdbcType=VARCHAR},
      input_format = #{record.inputFormat,jdbcType=VARCHAR},
      output_format = #{record.outputFormat,jdbcType=VARCHAR},
      hdfs_location = #{record.hdfsLocation,jdbcType=VARCHAR},
      table_type = #{record.tableType,jdbcType=VARCHAR},
      field_terminated = #{record.fieldTerminated,jdbcType=VARCHAR},
      line_terminated = #{record.lineTerminated,jdbcType=VARCHAR},
      store_format = #{record.storeFormat,jdbcType=VARCHAR},
      ddl_with_change = #{record.ddlWithChange,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update etl_meta_hivetable
    set table_id = #{record.tableId,jdbcType=INTEGER},
      hive_db = #{record.hiveDb,jdbcType=VARCHAR},
      input_format = #{record.inputFormat,jdbcType=VARCHAR},
      output_format = #{record.outputFormat,jdbcType=VARCHAR},
      hdfs_location = #{record.hdfsLocation,jdbcType=VARCHAR},
      table_type = #{record.tableType,jdbcType=VARCHAR},
      field_terminated = #{record.fieldTerminated,jdbcType=VARCHAR},
      line_terminated = #{record.lineTerminated,jdbcType=VARCHAR},
      store_format = #{record.storeFormat,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTable" >
    update etl_meta_hivetable
    <set >
      <if test="hiveDb != null" >
        hive_db = #{hiveDb,jdbcType=VARCHAR},
      </if>
      <if test="inputFormat != null" >
        input_format = #{inputFormat,jdbcType=VARCHAR},
      </if>
      <if test="outputFormat != null" >
        output_format = #{outputFormat,jdbcType=VARCHAR},
      </if>
      <if test="hdfsLocation != null" >
        hdfs_location = #{hdfsLocation,jdbcType=VARCHAR},
      </if>
      <if test="tableType != null" >
        table_type = #{tableType,jdbcType=VARCHAR},
      </if>
      <if test="fieldTerminated != null" >
        field_terminated = #{fieldTerminated,jdbcType=VARCHAR},
      </if>
      <if test="lineTerminated != null" >
        line_terminated = #{lineTerminated,jdbcType=VARCHAR},
      </if>
      <if test="storeFormat != null" >
        store_format = #{storeFormat,jdbcType=VARCHAR},
      </if>
      <if test="ddlWithChange != null" >
        ddl_with_change = #{ddlWithChange,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where table_id = #{tableId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTable" >
    update etl_meta_hivetable
    set hive_db = #{hiveDb,jdbcType=VARCHAR},
      input_format = #{inputFormat,jdbcType=VARCHAR},
      output_format = #{outputFormat,jdbcType=VARCHAR},
      hdfs_location = #{hdfsLocation,jdbcType=VARCHAR},
      table_type = #{tableType,jdbcType=VARCHAR},
      field_terminated = #{fieldTerminated,jdbcType=VARCHAR},
      line_terminated = #{lineTerminated,jdbcType=VARCHAR},
      store_format = #{storeFormat,jdbcType=VARCHAR},
      ddl_with_change = #{ddlWithChange,jdbcType=LONGVARCHAR}
    where table_id = #{tableId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fanli.metadata.entity.base.EtlMetaHiveTable" >
    update etl_meta_hivetable
    set hive_db = #{hiveDb,jdbcType=VARCHAR},
      input_format = #{inputFormat,jdbcType=VARCHAR},
      output_format = #{outputFormat,jdbcType=VARCHAR},
      hdfs_location = #{hdfsLocation,jdbcType=VARCHAR},
      table_type = #{tableType,jdbcType=VARCHAR},
      field_terminated = #{fieldTerminated,jdbcType=VARCHAR},
      line_terminated = #{lineTerminated,jdbcType=VARCHAR},
      store_format = #{storeFormat,jdbcType=VARCHAR}
    where table_id = #{tableId,jdbcType=INTEGER}
  </update>
</mapper>